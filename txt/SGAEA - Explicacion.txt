/*
    ┌───────────────────────────────────────────────────────────────────┐
    │ SISTEMA DE GESTIÓN ACADÉMICA DE ESTUDIANTES Y ASIGNATURAS (SGAEA) │
    └───────────────────────────────────────────────────────────────────┘
    
    * Autor: Armando Vaquero Vargas
    * Curso: 2º DAW
    * Fecha: 10/12/2024
    
    * Descripción:
        En este proyecto se gestiona los datos académicos de estudiantes y asignaturas, proporcionando
        funcionalidades como matriculación, desmatriculación, cálculo de promedios y búsquedas.  
*/
/*
    ┌─────────────┐
    │ C L A S E S │
    └─────────────┘
    * En esta sección se definen las clases usadas en el proyecto. Cada clase contiene sus atributos,
        constructores y métodos.
*/
/*
    CLASE DIRECCION
    ───────────────
    * Clase que define los aspectos de la dirección de una persona.

    * Declaro los atributos:
        - #calle: Nombre de la calle. [String]
        - #numero: Numero de la casa o el bloque. [Number]
        - #piso: Piso del bloque, si es el caso. [Number]
        - #cod_postal: Codigo postal de la localidad donde viva. [Number]
        - #provincia: Nombre de la provincia. [String]
        - #localidad: Nombre de la localidad. [String]
    
    * En el constructor:
        - Asigno los valores que se pasan en el constructor con sus respectivos atributos.
        - En el caso de el numero y del piso, compruebo que sea un número positivo y sin 
            decimales. Si no, le asigno el valor predeterminado, 0.
        - Tambien compruebo que el código postal sea de 5 dígitos. Si no, le asigno el 
            valor predeterminado 0.

    * Como métodos, creo:
        - `mostrarDireccion()`: Sirve para mostrar todos los valores de la dirección.
*/
class Direccion {

    * Atributos
    #calle;         [STRING]
    #numero;        [NUMBER]
    #piso;          [NUMBER]
    #cod_postal;    [NUMBER]
    #provincia;     [STRING]
    #localidad;     [STRING]

    * Constructor
    constructor(calle, numero, piso, cod_postal, provincia, localidad) {}

    * Metodos
    mostrarDireccion() {}
}

/*
    CLASE PERSONA
    ───────────────
    * Clase que sirve para poder implementar la herencia con la clase Estudiante.

    * Declaro los atributos:
        - #nombre: Nombre de la person. [String]
        - #edad: Edad de la persona. [Number]
        - #direccion: Dirección de la persona. [Object]
    
    * En el constructor:
        - Lo primero que hago es verificar:
            + Que el nombre sea válido (solo letras y espacios).
            + Y que la edad sea  válida (entre 6 y 80 años).
        - Si son correctos los valores, le asigno los valores que paso por parámetros a los
            atributos.
        - Si no son correctos, lanzo un error indicando que el nombre o la edad no son válidos.

    * Los Getters:
        - Declaro los getters de los atributos nombre, edad y dirección. Este último, llamando al 
            método de la clase Direccion, mostrarDireccion().
*/
class Persona {

    * Atributos
    #nombre;        [STRING]
    #edad;          [NUMBER]
    #direccion;     [OBJECT]

    * Constructor
    constructor(nombre, edad, direccion) {}

    * Getter
    get nombre() {}
    get edad() {}
    get direccion() {}
}

/* 
    CLASE ASIGNATURA
    ────────────────
    * Clase que crea las asignaturas y contiene las calificaciones de los estudiantes.

    * Declaro los atributos:
        - #nombre: Nombre para las asignaturas. [String]
        - #calificaciones: Mapa que contendrá el ID el Estudiante y sus calificaciones. [Object]
            Ejemplo: [ {idEstudiante: [calificaciones]} ].

    * En el constructor:
        - Lo primero que hago es verificar si el nombre es válido (solo letras y espacios).
            + Si es válido, le asigno el nombre al atributo "this.#nombre" y el atributo 
                "this.#calificacion" lo inicializo a un mapa vacío.
            + Si no es válido, mostrará un error indicando que el nombre no es válido.
    
    * Getter:
        - Declaro el getter de nombre, que me devuelve el nombre de la Asignatura.
    
    * Como métodos, creo:
        - `obtenerCalificaciones(id_Estudiante)`: Devuelvo un array con las calificaciones del 
            Estudiante que paso por parámetros, de una asignatura determinada.

        - `addCalificacion(id_Estudiante, calificacion)`: Añade una nota al Estudiante en una 
            asignatura determinada. Pide por parámetros el id_Estudiante y la calificación a añadir.
            1º - Comprueba que la calificación es correcta (un número y, >0 y <10).
                + Si no es correcta, lanza un error.
            2º - Comprueba si "this.#calificaciones" ya tiene registrado el ID del Estudiante.
                + Si tiene dentro ya una Key que es la del Id del Estudiante, le añade otra calificación.
                + Si no, añade de un nuevo id_Estudiante y una calificación a "this.#calificacion".
            ---------------------------------------------------------------------------------------------
            ( Compruebo con "mapa.has.(key)", añado calificación con "mapa.get(key).push(valor)" y añado
              uno nuevo con "mapa.set(key, [valor])").
            ---------------------------------------------------------------------------------------------

        - `calcularPromedioGeneral()`: Calcula el promedio de las calificaciones que hay en una Asignatura.
            Para hacerlo hago lo siguiente:
            1º - Declaro dos variables:
                + "total_Notas": contendrá la suma total de todas las notas. [Number]
                + "cantidad_Notas":  contendrá el número total de notas. [Number]
            2º - Luego recorro "this.#calificaciones" (usando un .forEach).
            3º - Dentro de este creo:
                + "suma_Notas": variable que sumará todas las notas (usando .reduce).
                + "total_Notas": sumará todas las suma_Notas con la iteración del bucle.
                + "contidad_Notas": sumará la cantidad de notas que tiene cada Estudiante.  
            ---------------------------------------------------------------------------------------------
            (Para suma_Notas uso el método "array.reduce((vAntiguo, vNuevo) => vAntiguo + vNuevo, 0)")
            ---------------------------------------------------------------------------------------------
            4º - Compruebo si hay alguna calificación (total_Notas > 0):
                + Si no, devuelvo "Sin calificaciones".
                + Si tenia, devuelvo el cálculo del promedio (total_Notas / cantidad_Notas), con dos 
                    decimales (usando .toFixed(2) -> [String]).
        
        - `calcularPromedioEstudiante(id_Estudiante)`: Calcula el promedio de las calificaciones de un
            Estudiante en una Asignatura. Para hacerlo hago lo siguiente:
            1º - Declaro:
                + "notas": usa el método "obtenerCalificaciones(id_Estudiante)" para obtener las calificaciones.
                + "total_Notas": sumará todas las notas.
                + "cantidad_Notas": obtendrá la cantidad de notas.
            2º - Y por último, devuelvo lo mismo que en el método anterior.
        
        - `mostrarAsignaturas()`: Sirve para mostrar todas las Asignaturas de una forma formateada.
*/
class Asignatura {

    * Atributos
    #nombre;         [STRING]
    #calificaciones; [OBJECT]

    * Constructor
    constructor(nombre) {}

    * Getter
    get nombre() {}

    * Metodos
    obtenerCalificaciones(id_Estudiante) {}
    addCalificacion(id_Estudiante, calificacion) {}
    calcularPromedioGeneral() {}
    calcularPromedioEstudiante(id_Estudiante) {}
    mostrarAsignaturas() {}
}

/*
    CLASE ESTUDIANTE
    ────────────────
    * Clase que hereda de Persona y gestiona la información de los Estudiantes.
        Cada Estudiante tiene un ID único, Asignaturas en las que esta matriculado y un historial.

    * Declaro los atributos:
        - static id_contador = 1: Contador global para generar IDs. [Number]
        - static id_Disponibles = []: Array que contendrá los IDs libres. [Array]
        - #id: ID del Estudiante. [String]
        - #asignatura: Lista de Asignaturas matriculadas del Estudiante. [Array<Asignatura>]
        - #historial: Historial de las matrículas y desmatrículas (con fecha) del Estudiante. [Array]
    
    * En el constructor, lo que hago es: 
        1º - Capturar posibles errores al generar la instancia Persona. Por el nombre o la edad.
        2º - LLamo al constructor de la clase Persona usando "super(nombre, edad, direccion)".
        3º - Genero el ID del Estudiante.
        ------------------------------------------------------------------------------------------------
        Para generar el ID:
            1º - En la variable "id_gen_letras" obtengo las 3 primeras letras del nombre.
            2º - Ahora dos opciones:
                2.1º - Si "Estudiante.id_Disponibles" tiene valores (un Estudiante ha sido eliminado de
                    la lista), se le asigna el menor número, y este número se elimina de "id_Disponibles".
                2.2º - Si no tiene valores, se le asigna el siguiente número disponible que está indicado
                    en la variable "id_contador". Y esta variable aumenta.
            3º - Este número (independientemente de la opción) se formateará usando ".padStart(3, "0")".
            4º - Este proceso generará un ID parecido a este: "ARM001".
        ------------------------------------------------------------------------------------------------
        4º - Por último, inicializo los atributos que he declarado antes, a arrays vacios.
        
    * Los Getters:
        - Declaro los getters de id y asignaturas. El primero me devuelve el id y el segundo me devuelve
            un array con las Asignaturas matriculadas del Estudiante.

    * Como métodos, creo:
        - `matricular(...asignaturas)`: Asigno una o varias Asignaturas al Estudiante. Funcionamiento:
            1º - Recorre todas las asignaturas que se pasan por parámetros (con un .forEach).
            2º - Para cada asignatura, se verifica que no este incluida en "this.#asignaturas".
            3º - Si no lo está, se añade la asignatura a "this.#asignaturas" y a "this.#historial"
                un registro de esta matriculación.

        - `desmatricular(..asignaturas)`: Desasigno una o varias Asignaturas del Estudiante. El funcionamiento
            es parecido al método anterior pero usando el método ".splice" y en "this.#historial" se 
            guarda como desmatriculación.

        - `agregarCalificacion(materia, nota)`: Añade una calificación al Estudiante en la Asignatura indicada.
            Para hacerlo hago lo siguiente:
            1º - Compruebo que el Estudiante está matriculado en la Asignatura indicada en los parámetros.
            2º - Si está matriculado, llamo al método de la clase Asignatura "addCalificacion(id_Estudiante, nota)".
                y le añado la nota. Se recogeriá el error si la nota no fuese válida.

        - `promedioTotalEstudiante()`: Calcula el promedio de notas del Estudiante en todas las Asignaturas
            matriculadas. El funcionamiento es semejante al método "calcularPromedioGeneral()" de la clase 
            Asignatura, pero modifico:
            1º - Para obtener las notas del Estudiante en un array, lo que hago es llamar al método de la clase 
                Asignatura "obtenerCalificaciones(id_Estudiante)".
        
        - `mostrarHistorial()`: Mostrará el historial del Estudiante formateado. En "matricular" y "desmatricular" 
            se guardaba un array compuesto de:
                1º - En la posición [0], la fecha actual en Español (método privado #generarFechaActual()).
                2º - En la posición [1], el nombre de la materia.
                3º - En la posición [2], el nombre del proceso (matricula o desmatricula).
            Recorro "this.#historial" y muestro los registros formateados. Por ejemplo:
                `06/12/2024 - DAWES - Matrícula/Desmatricula`.
        
        - `mostrarPersona()`: Sirve para mostar los datos del Estudiante formateados.
        
        - `#generarFechaActual()`: Método privado que devuelve la fecha actual. Para hacerlo hago lo siguiente:
            1º - Genero una instancia Date() (contiene toda la información del día actual).
            2º - Luego formateo la fecha usando ".toLocaleDateString()" para convertirla en una cadena legible.
                + Le indico que el idioma es Español ("es-ES").
                + Le indico que el día lo muestre con dos dígitos (day: "2-digit")
                + Le indico que el mes lo muestre con dos dígitos (month: "2-digit")
                + Le indico que el año lo muestre con cuatro dígitos (day: "numeric")
*/
class Estudiante extends Persona {

    * Atributos
    static id_contador = 1;         [NUMBER]
    static id_Disponibles = [];     [ARRAY]  
    #id;                            [STRING]
    #asignatura;                    [OBJECT]
    #historial;                     [OBJECT]

    * Constructor
    constructor(nombre, edad, direccion){ 
        super(nombre, edad, direccion);
    }

    * Getter
    get id() {}
    get asignaturas() {}

    * Metodos
    matricular(...asignaturas) {}
    desmatricular(...asignaturas) {}
    agregarCalificacion(materia, nota) {}
    promedioTotalEstudiante() {}
    mostrarHistorial() {}
    mostrarEstudiante() {}
    #generarFechaActual() {}
}

/*
    CLASE LISTA
    ───────────
    * Clase que gestiona los Estudiantes y Asginaturas, permitiendo agregar, eliminar, listar o buscar 
        los elementos que contienen estas listas.  

    * Declaro los atributos:
        - #estudiantes: Lista que contendrá todos los Estudiantes. [Array<Estudiante>]
        - #asignaturas: Lista que contendrá todas las Asignaturas. [Array<Asignatura>]
    
    * En el constructor:
        - Lo que hago es inicializar las listas como arrays vacíos.
    
    * Los Getters:
        - Declaro dos métodos Getters para las listas estudiantes y asignaturas.

    * Como métodos, creo:
        - "agregarEstudiante(alumno)": Añade un Estudiante a "this.#estudiantes". Funcionalidad:
            1º - Compruebo si el Estudiante ya se encuentra dentro.
            2º - Si está dentro, devuelvo un mensaje indicándolo.
            3º - Si no, lo añado y muestro un mensaje indicando que lo he añadido.

        - "agregarAsignatura(materia)": Añade una Asignatura a "this.#asignaturas". Su funcionalidad es la
            misma que la del anterior método, pero con Asignatura.

        - "eliminarEstudiante(alumno)": Elimina un Estudiante de "this.#estudiantes". Funcionalidad:
            1º - Busco la posición en "this.#estudiantes" del alumno que paso por parámetros.
            2º - Si la posición es !== -1, el Estudiante está en la lista. Se elimina el alumno de "this.#estudiantes"
                y se guarda el número del ID en la variable constante de la clase Estudiante, "id_Disponibles". 
            3º - Si es eliminado, mostrarar un mensaje indicándolo, y si no es eliminado, se indicara con un 
                mensaje también.

        - "eliminarAsignatura(materia)": Elimina una Asignatura de "this.#asignaturas". Su funcionalidad es la
            misma que la del anterior método, pero con Asignatura. No añade nada a "id_Disponibles".

        - "buscarEstudiante(patron)": Busca Estudiantes en "this.#estudiantes" por un patrón de su nombre.
            Funcionalidad:
            1º - Con el método ".filter", recorro todos los alumnos que están registrados en "this.#estudiantes" y
                con su nombre en minúscula, compruebo si contiene el patrón que paso por parámetros en el nombre.
                Si lo contiene, este alumno se guarda en la variable "resultado".
            2º - Compruebo que la variable "resultado" no esta vacía:
                + Si no lo está, recorre "resultado" y ejecuta para cada instacia el método de la clase Estudiante,
                    "mostrarEstudiante()".
                + Si lo está, muestra un mensaje indicando que no existen Estudiantes registrados con ese patrón.
            
        - "buscarAsignatura(patron)": Busca Asignaturas en "this.#asignaturas" por un patrón de su nombre.
            Su funcionalidad es la misma que la del anterior método, pero con Asignatura.
*/
class Lista {

    * Atributos
    #estudiantes;       [ARRAY]  
    #asignaturas;       [ARRAY]  

    * Constructor
    constructor() {}

    * Getter
    get estudiantes() {}
    get asignaturas() {}

    * Metodos
    agregarEstudiante(alumno) {}
    agregarAsignatura(materia) {}
    eliminarEstudiante(alumno) {}
    eliminarAsignatura(materia) {}
    buscarEstudiante(patron) {}
    buscarAsignatura(patron) {}
}

/*
    ┌─────────────────────────────────┐
    │ C Ó D I G O   P R I N C I P A L │
    └─────────────────────────────────┘
    * En esta sección se encuentra el código principal que se ejecuta al cargar el srcipt.
*/
/*
    AÑADIR DATOS
    ────────────
    * Aqui añado datos para probar la funcionalidades de las clases, sin la necesidad de crear todo el
        rato Estudiantes, Asignaturas, etc.
*/

/*
    Datos . . .
*/

/*
    FUNCIONES DEL MENÚ
    ──────────────────
    * Aqui creo las funciones principales que son la estructura principal del proyecto. Se crean diferentes
        menús en los que se pueden realizar operaciones relacionadas con Estudiantes y Asignaturas.
    
    * Funciones Principales:
        - `menuPrincipal()`: Punto de entrada principal que permite seleccionar una acción en relación con
            los Estudiantes y las Asignaturas. Funcionalidad: 
            1º - Genero un bucle que finalizara cuando se indique con una opción del menú.
            2º - Muestro el menú. Ejemplo:
                "Menú Principal:
                 1. Agregar Estudiante / Asignatura
                 2. Eliminar Estudiante / Asignatura
                 3. Mostrar Estudiantes / Asignaturas
                 4. Matricular Estudiante
                 5. Desmatricular Estudiante
                 6. Añadir Calificacion
                 7. Mostrar Historial de un Estudiante
                 8. Buscar Estudiante / Asignatura
                 0. Salir del programa"
            3º - Pido una opción con "prompt" y está la uso en un "switch". En función de la opción que se 
                seleccione hará una cosa u otra.
            
        - `menúSecundario()`: Menú que permite seleccionar Estudiantes o Asignaturas. Usando en las opciones de
            "1. Agregar Estudiante / Asignatura" o "2. Eliminar Estudiante / Asignatura", entre otras. Ejemplo:
                "Seleccione una opcion: 
                 1. Estudiantes 
                 2. Asignaturas 
                 0. Salir"

    * Funciones Auxiliares:
        - `seleccionarEstudiante()`: Muestra una lista numerada de los Estudiantes registrados, permitiendo
            seleccionar uno para realizar operaciones con él. Usado en "2. Eliminar Estudiante / Asignatura",
            por ejemplo.

        - `seleccionarAsignatura()`: Muestra una lista numerada de las Asignaturas registradas, permitiendo
            seleccionar una para realizar operaciones con ella. Usado en "2. Eliminar Estudiante / Asignatura",
            por ejemplo.
        
        - `mostrarAsignaturasMatricula(posicion_Est)`: Con el valor que se pasa por parámetros se obtiene el
            alumno. De esta manera, permite ver todas las Asignaturas que están registradas y al lado en cuales
            el alumno está matriculado. Usado en "4. Matricular Estudiante".
        
        - `mostrarAsignaturasEstudiante(posicion_Est)`: Con el valor que se pasa por parámetros se obtiene el
            alumno. De esta manera, permite mostrar solo las asignaturas en las que se encuentra matriculado este.
            Usado en "5. Desmatricular Estudiante".
        
    * Lógica de Iteracción:
        El funcionamiento del proyecto es el siguiente:
                Se muestra el menú principal por consola y se piede con un "prompt" que se introduzca una 
            opción. Una vez seleccionada se seleccionara en el "switch" la opción indicada, ejecutando los procesos
            necesarios para realizar el proceso seleccionado.
                Cuando se halla completado el proceso se volvera al menú principal, de esta manera se podrá
            seleccionar otra opción o se podrá salir del programa indicando la opción de salida.
    
    * Notas:
        - Todo el sistema usa "console.log" para mostrar datos, "prompt" para recoger datos de entrada y
            "console.clear()" para limpiar la consola (para que queda algo mejor).
        - Se tiene en cuenta que el usuario, en los menús, seleccione una opción no valida, indicando a
            través de un "alert()" que ha introducido una opción no válida.
*/
function menuSecundario() {}
function seleccionarEstudiante() {}
function seleccionarAsignatura() {}
function mostrarAsignaturasMatricula(posicion_Est) {}
function mostrarAsignaturasEstudiante(posicion_Est) {}
function menuPrincipal() {}